class Solution {
    public int firstOcc(int nums[], int target){
        int firstOc = -1;

        int low = 0, high = nums.length - 1;
        while(low <= high){
            int mid = (low + high)/2;
            // this can be my first occ but try to find my firstOcc in left side of the array
            if(nums[mid] == target){
                firstOc = mid;
                high = mid - 1;
            }else if(nums[mid] > target){
                high = mid - 1;
            }else{
                low = mid + 1;
            }
        }
        return firstOc;
    }
     public int lastOcc(int nums[], int target){
        int lastOc = -1;

        int low = 0, high = nums.length - 1;
        while(low <= high){
            int mid = (low + high)/2;
            // this can be my last occ but try to find my lastOcc in right side of the array
            if(nums[mid] == target){
                lastOc = mid;
                low = mid + 1;
            }else if(nums[mid] > target){
                high = mid - 1;
            }else{
                low = mid + 1;
            }
        }
        return lastOc;
    }
    public int[] searchRange(int[] nums, int target) {
       int fo = firstOcc(nums, target);
       int lo = lastOcc(nums, target);
        return new int[]{fo, lo};
    }
}
