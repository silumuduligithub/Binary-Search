class Solution 
{
    //Function to find minimum number of pages.
    public static boolean isAllocationPossible(int[] A, int capacity, int student){
        int totalPages = 0;
        int count = 1;
        for(int i = 0; i < A.length; i++){
            if((totalPages + A[i]) <= capacity){
                totalPages += A[i];
            }else{
                count++;
                totalPages = A[i];
            }
        }
        
        // if i am able to devide it in 2 students that means we can devide that in 4 student
        return count <= student ? true : false;
    }
    public static int findPages(int[]A,int N,int M)
    {
        //Your code here
        if(M > N)return -1;
        int lo = A[0];
        int hi = A[0];
        int potentialAns = -1;
        for(int i = 1; i < N; i++){
            lo = Math.max(lo, A[i]);
            hi += A[i];
        }
        while(lo <= hi){
            int mid = (lo + hi) / 2;
            // if i am able to devide the pages within the capacity that means this can be my potential answer
            if(isAllocationPossible(A, mid, M)){
                potentialAns = mid;
                hi = mid - 1;
            }else{
                // if i am not able to devide the pages that means we have to we have to left to right
                lo = mid + 1;
            }
        }
        return potentialAns;
    }
};
