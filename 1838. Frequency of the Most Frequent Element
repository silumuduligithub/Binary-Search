class Solution {
    public boolean isPossible(int mid, int k, int[] nums){
        int  windowSum = 0;
        for(int i = 0; i < mid; i++){
            windowSum += nums[i];
        }
        int totalSum = nums[mid-1] * mid;
        if((totalSum - windowSum) <= k)return true;
        int j = 0;
        for(int i = mid; i < nums.length; i++){
            windowSum -= nums[j];
            windowSum += nums[i];
            totalSum = nums[i] * mid;
            if((totalSum - windowSum) <= k)return true;
            j++;
        }
        return false;
    }
    public int maxFrequency(int[] nums, int k) {
        Arrays.sort(nums);
        int low = 1, high = nums.length ;
        int ans = 0;
        while(low <= high){
            int mid = (low + high) / 2;
            if(isPossible(mid, k, nums)){
                ans = mid;
                low = mid + 1;
            }else{
                high = mid - 1;
            }
        }
        // if(ans == nums.length - 1)return nums.length;
        return ans;
    }
}
